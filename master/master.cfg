# -*- python -*-
# ex: set filetype=python:

import os

from buildbot.plugins import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### PASSWORDS

worker_password = os.environ['WORKERPASS']

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.

c['workers'] = [worker.Worker("niancat-micro-worker", worker_password)]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': os.environ.get("BUILDBOT_WORKER_PORT", 9989)}}

####### CHANGESOURCES

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        'git://github.com/dandeliondeathray/niancat-micro.git',
        workdir='gitpoller-workdir', branch='master',
        pollinterval=300))

####### SCHEDULERS

force_niancat_micro = schedulers.ForceScheduler(name="forceniancat",
                                                builderNames=["niancat"])
force_slackrest = schedulers.ForceScheduler(name="forceslackrest",
                                            builderNames=["slackrest"])
niancat_acceptance_scheduler = schedulers.Dependent(name="niancat-acceptance-scheduler",
                         upstream=force_niancat_micro,
                         builderNames=["niancat-acceptance"])
niancatslack_scheduler = schedulers.Dependent(name="niancat-slack-scheduler",
                         upstream=force_slackrest,
                         builderNames=["niancat-slack"])

c['schedulers'] = [force_niancat_micro,
                   force_slackrest,
                   niancat_acceptance_scheduler,
                   niancatslack_scheduler]


####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

# TODO: These should be tagged with prod after it has passed acceptance tests
#       for the system as a whole. We don't have any such tests yet.

niancatscala_build = util.BuildFactory()
niancatscala_build.addStep(steps.Git(repourl='http://github.com/dandeliondeathray/niancat-micro.git', mode='incremental'))
niancatscala_build.addStep(steps.ShellCommand(command=["sbt", "compile", "assembly"], workdir="build/niancat"))
niancatscala_build.addStep(steps.ShellCommand(
    command=[
        'docker', 'build',
        '-f', 'Dockerfile.arm32v7',
        '-t', util.Interpolate('erikedin/niancat:%(prop:got_revision)s'),
        '.'],
    workdir='build/niancat'))

niancat_acceptance_factory = util.BuildFactory()
niancat_acceptance_factory.addStep(
    steps.Git(repourl='http://github.com/dandeliondeathray/niancat-micro.git',
              mode='incremental'))
niancat_acceptance_factory.addStep(steps.ShellSequence(
    commands=[
        util.ShellArg(command=['docker-compose', 'build'],
                      haltOnFailure=True,
                      logfile='compose_build'),
        util.ShellArg(command=['docker-compose', 'run', 'niancatacceptance'],
                      logfile='acceptance',
                      haltOnFailure=False,
                      flunkOnFailure=True),
        util.ShellArg(command=['docker-compose', 'down'],
                      haltOnFailure=False,
                      flunkOnFailure=False,
                      logfile='compose_down')
    ],
    workdir='build/acceptance/niancat'))
niancat_acceptance_factory.addStep(steps.ShellCommand(
    command=['docker', 'tag',
             util.Interpolate('erikedin/niancat:%(prop:got_revision)s'),
             'erikedin/niancat:prod']))

slackrest_build = util.BuildFactory()
slackrest_build.addStep(steps.Git(repourl='http://github.com/dandeliondeathray/niancat-micro.git', mode='incremental'))
slackrest_build.addStep(steps.ShellCommand(
    command=['python', '-m', 'unittest'],
    workdir='build/slackrest'))
slackrest_build.addStep(steps.ShellCommand(
    command=['docker', 'build',
             '-f', 'Dockerfile.arm32v7',
             '-t', util.Interpolate('erikedin/slackrest:%(prop:got_revision)s'),
             '.'],
    workdir='build/slackrest'))
slackrest_build.addStep(steps.ShellCommand(
    command=[
        'docker', 'tag',
        util.Interpolate('erikedin/slackrest:%(prop:got_revision)s'),
        'erikedin/slackrest:prod']))

niancatslack_build = util.BuildFactory()
niancatslack_build.addStep(steps.Git(repourl='http://github.com/dandeliondeathray/niancat-micro.git', mode='incremental'))
niancatslack_build.addStep(steps.ShellCommand(
    command=['docker', 'build',
             '-t', util.Interpolate('erikedin/niancat-slack:%(prop:got_revision)s'),
             '.'],
    workdir='build/niancat-slack'))
niancatslack_build.addStep(steps.ShellCommand(
    command=['docker', 'tag',
             util.Interpolate('erikedin/niancat-slack:%(prop:got_revision)s'),
             'erikedin/niancat-slack:prod']))

c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name="niancat",
                       workernames=["niancat-micro-worker"],
                       factory=niancatscala_build,
                       builddir='data/niancat'))
c['builders'].append(
    util.BuilderConfig(name='niancat-acceptance',
                       workernames=['niancat-micro-worker'],
                       factory=niancat_acceptance_factory,
                       builddir='data/niancat-acceptance'))

c['builders'].append(
    util.BuilderConfig(name='slackrest',
                       workernames=['niancat-micro-worker'],
                       factory=slackrest_build,
                       builddir='data/slackrest'))

c['builders'].append(
    util.BuilderConfig(name='niancat-slack',
                       workernames=['niancat-micro-worker'],
                       factory=niancatslack_build,
                       builddir='data/niancat-slack'))



####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# like IRC bots.

c['status'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "niancat-micro"
c['titleURL'] = "http://github.com/dandeliondeathray/niancat-micro.git"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = os.environ.get("BUILDBOT_WEB_URL", "http://localhost:8010/")

# minimalistic config to activate new web UI
c['www'] = dict(port=os.environ.get("BUILDBOT_WEB_PORT", 8010),
                plugins=dict(waterfall_view={}, console_view={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : 'sqlite:///db/state.sqlite'
}
